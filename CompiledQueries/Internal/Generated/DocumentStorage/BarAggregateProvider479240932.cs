// <auto-generated/>
#pragma warning disable
using CustomCompiledQueries;
using Marten.Internal;
using Marten.Internal.Storage;
using Marten.Schema;
using Marten.Schema.Arguments;
using Npgsql;
using System;
using System.Collections.Generic;
using Weasel.Core;
using Weasel.Postgresql;

namespace Marten.Generated.DocumentStorage
{
    // START: UpsertBarAggregateOperation479240932
    public class UpsertBarAggregateOperation479240932 : Marten.Internal.Operations.StorageOperation<CustomCompiledQueries.BarAggregate, System.Guid>
    {
        private readonly CustomCompiledQueries.BarAggregate _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpsertBarAggregateOperation479240932(CustomCompiledQueries.BarAggregate document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessRevision(reader, exceptions))
            {
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessRevisionAsync(reader, exceptions, token))
            {
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Upsert;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, CustomCompiledQueries.BarAggregate document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select public.mt_upsert_baraggregate(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter(document.Id);
            setCurrentRevisionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: UpsertBarAggregateOperation479240932
    
    
    // START: InsertBarAggregateOperation479240932
    public class InsertBarAggregateOperation479240932 : Marten.Internal.Operations.StorageOperation<CustomCompiledQueries.BarAggregate, System.Guid>
    {
        private readonly CustomCompiledQueries.BarAggregate _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public InsertBarAggregateOperation479240932(CustomCompiledQueries.BarAggregate document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            return System.Threading.Tasks.Task.CompletedTask;
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Insert;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, CustomCompiledQueries.BarAggregate document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select public.mt_insert_baraggregate(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter(document.Id);
            setCurrentRevisionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: InsertBarAggregateOperation479240932
    
    
    // START: UpdateBarAggregateOperation479240932
    public class UpdateBarAggregateOperation479240932 : Marten.Internal.Operations.StorageOperation<CustomCompiledQueries.BarAggregate, System.Guid>
    {
        private readonly CustomCompiledQueries.BarAggregate _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpdateBarAggregateOperation479240932(CustomCompiledQueries.BarAggregate document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessRevision(reader, exceptions))
            {
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessRevisionAsync(reader, exceptions, token))
            {
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, CustomCompiledQueries.BarAggregate document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select public.mt_update_baraggregate(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter(document.Id);
            setCurrentRevisionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: UpdateBarAggregateOperation479240932
    
    
    // START: QueryOnlyBarAggregateSelector479240932
    public class QueryOnlyBarAggregateSelector479240932 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<CustomCompiledQueries.BarAggregate>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public QueryOnlyBarAggregateSelector479240932(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public CustomCompiledQueries.BarAggregate Resolve(System.Data.Common.DbDataReader reader)
        {

            CustomCompiledQueries.BarAggregate document;
            document = _serializer.FromJson<CustomCompiledQueries.BarAggregate>(reader, 0);
            var isDeleted = reader.GetFieldValue<bool>(1);
            document.Deleted = isDeleted;
            if (!reader.IsDBNull(2))
            {
            var deletedAt = reader.GetFieldValue<System.DateTimeOffset>(2);
            document.DeletedAt = deletedAt;
            }
            return document;
        }


        public async System.Threading.Tasks.Task<CustomCompiledQueries.BarAggregate> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {

            CustomCompiledQueries.BarAggregate document;
            document = await _serializer.FromJsonAsync<CustomCompiledQueries.BarAggregate>(reader, 0, token).ConfigureAwait(false);
            var isDeleted = await reader.GetFieldValueAsync<bool>(1, token);
            document.Deleted = isDeleted;
            if (!(await reader.IsDBNullAsync(2, token).ConfigureAwait(false)))
            {
            var deletedAt = await reader.GetFieldValueAsync<System.DateTimeOffset>(2, token).ConfigureAwait(false);
            document.DeletedAt = deletedAt;
            }
            return document;
        }

    }

    // END: QueryOnlyBarAggregateSelector479240932
    
    
    // START: LightweightBarAggregateSelector479240932
    public class LightweightBarAggregateSelector479240932 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<CustomCompiledQueries.BarAggregate>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public LightweightBarAggregateSelector479240932(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public CustomCompiledQueries.BarAggregate Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);

            CustomCompiledQueries.BarAggregate document;
            document = _serializer.FromJson<CustomCompiledQueries.BarAggregate>(reader, 1);
            var version = reader.GetFieldValue<int>(2);
            var isDeleted = reader.GetFieldValue<bool>(3);
            document.Deleted = isDeleted;
            if (!reader.IsDBNull(4))
            {
            var deletedAt = reader.GetFieldValue<System.DateTimeOffset>(4);
            document.DeletedAt = deletedAt;
            }
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }


        public async System.Threading.Tasks.Task<CustomCompiledQueries.BarAggregate> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);

            CustomCompiledQueries.BarAggregate document;
            document = await _serializer.FromJsonAsync<CustomCompiledQueries.BarAggregate>(reader, 1, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<int>(2, token);
            var isDeleted = await reader.GetFieldValueAsync<bool>(3, token);
            document.Deleted = isDeleted;
            if (!(await reader.IsDBNullAsync(4, token).ConfigureAwait(false)))
            {
            var deletedAt = await reader.GetFieldValueAsync<System.DateTimeOffset>(4, token).ConfigureAwait(false);
            document.DeletedAt = deletedAt;
            }
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }

    }

    // END: LightweightBarAggregateSelector479240932
    
    
    // START: IdentityMapBarAggregateSelector479240932
    public class IdentityMapBarAggregateSelector479240932 : Marten.Internal.CodeGeneration.RevisionedDocumentSelectorWithIdentityMap<CustomCompiledQueries.BarAggregate, System.Guid>, Marten.Linq.Selectors.ISelector<CustomCompiledQueries.BarAggregate>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public IdentityMapBarAggregateSelector479240932(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public CustomCompiledQueries.BarAggregate Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            CustomCompiledQueries.BarAggregate document;
            document = _serializer.FromJson<CustomCompiledQueries.BarAggregate>(reader, 1);
            var version = reader.GetFieldValue<int>(2);
            var isDeleted = reader.GetFieldValue<bool>(3);
            document.Deleted = isDeleted;
            if (!reader.IsDBNull(4))
            {
            var deletedAt = reader.GetFieldValue<System.DateTimeOffset>(4);
            document.DeletedAt = deletedAt;
            }
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }


        public async System.Threading.Tasks.Task<CustomCompiledQueries.BarAggregate> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            CustomCompiledQueries.BarAggregate document;
            document = await _serializer.FromJsonAsync<CustomCompiledQueries.BarAggregate>(reader, 1, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<int>(2, token);
            var isDeleted = await reader.GetFieldValueAsync<bool>(3, token);
            document.Deleted = isDeleted;
            if (!(await reader.IsDBNullAsync(4, token).ConfigureAwait(false)))
            {
            var deletedAt = await reader.GetFieldValueAsync<System.DateTimeOffset>(4, token).ConfigureAwait(false);
            document.DeletedAt = deletedAt;
            }
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }

    }

    // END: IdentityMapBarAggregateSelector479240932
    
    
    // START: DirtyTrackingBarAggregateSelector479240932
    public class DirtyTrackingBarAggregateSelector479240932 : Marten.Internal.CodeGeneration.RevisionedDocumentSelectorWithDirtyChecking<CustomCompiledQueries.BarAggregate, System.Guid>, Marten.Linq.Selectors.ISelector<CustomCompiledQueries.BarAggregate>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public DirtyTrackingBarAggregateSelector479240932(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public CustomCompiledQueries.BarAggregate Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            CustomCompiledQueries.BarAggregate document;
            document = _serializer.FromJson<CustomCompiledQueries.BarAggregate>(reader, 1);
            var version = reader.GetFieldValue<int>(2);
            var isDeleted = reader.GetFieldValue<bool>(3);
            document.Deleted = isDeleted;
            if (!reader.IsDBNull(4))
            {
            var deletedAt = reader.GetFieldValue<System.DateTimeOffset>(4);
            document.DeletedAt = deletedAt;
            }
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }


        public async System.Threading.Tasks.Task<CustomCompiledQueries.BarAggregate> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            CustomCompiledQueries.BarAggregate document;
            document = await _serializer.FromJsonAsync<CustomCompiledQueries.BarAggregate>(reader, 1, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<int>(2, token);
            var isDeleted = await reader.GetFieldValueAsync<bool>(3, token);
            document.Deleted = isDeleted;
            if (!(await reader.IsDBNullAsync(4, token).ConfigureAwait(false)))
            {
            var deletedAt = await reader.GetFieldValueAsync<System.DateTimeOffset>(4, token).ConfigureAwait(false);
            document.DeletedAt = deletedAt;
            }
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }

    }

    // END: DirtyTrackingBarAggregateSelector479240932
    
    
    // START: OverwriteBarAggregateOperation479240932
    public class OverwriteBarAggregateOperation479240932 : Marten.Internal.Operations.StorageOperation<CustomCompiledQueries.BarAggregate, System.Guid>
    {
        private readonly CustomCompiledQueries.BarAggregate _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public OverwriteBarAggregateOperation479240932(CustomCompiledQueries.BarAggregate document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessRevision(reader, exceptions))
            {
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessRevisionAsync(reader, exceptions, token))
            {
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, CustomCompiledQueries.BarAggregate document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select public.mt_overwrite_baraggregate(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter(document.Id);
            setCurrentRevisionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: OverwriteBarAggregateOperation479240932
    
    
    // START: QueryOnlyBarAggregateDocumentStorage479240932
    public class QueryOnlyBarAggregateDocumentStorage479240932 : Marten.Internal.Storage.QueryOnlyDocumentStorage<CustomCompiledQueries.BarAggregate, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public QueryOnlyBarAggregateDocumentStorage479240932(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(CustomCompiledQueries.BarAggregate document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(CustomCompiledQueries.BarAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteBarAggregateOperation479240932
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateBarAggregateOperation479240932
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(CustomCompiledQueries.BarAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertBarAggregateOperation479240932
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(CustomCompiledQueries.BarAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteBarAggregateOperation479240932
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertBarAggregateOperation479240932
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(CustomCompiledQueries.BarAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteBarAggregateOperation479240932
            (
                document, Identity(document),
                null,
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteBarAggregateOperation479240932
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override System.Guid Identity(CustomCompiledQueries.BarAggregate document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.QueryOnlyBarAggregateSelector479240932(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: QueryOnlyBarAggregateDocumentStorage479240932
    
    
    // START: LightweightBarAggregateDocumentStorage479240932
    public class LightweightBarAggregateDocumentStorage479240932 : Marten.Internal.Storage.LightweightDocumentStorage<CustomCompiledQueries.BarAggregate, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public LightweightBarAggregateDocumentStorage479240932(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(CustomCompiledQueries.BarAggregate document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(CustomCompiledQueries.BarAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteBarAggregateOperation479240932
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateBarAggregateOperation479240932
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(CustomCompiledQueries.BarAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertBarAggregateOperation479240932
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(CustomCompiledQueries.BarAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteBarAggregateOperation479240932
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertBarAggregateOperation479240932
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(CustomCompiledQueries.BarAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteBarAggregateOperation479240932
            (
                document, Identity(document),
                null,
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteBarAggregateOperation479240932
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override System.Guid Identity(CustomCompiledQueries.BarAggregate document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.LightweightBarAggregateSelector479240932(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: LightweightBarAggregateDocumentStorage479240932
    
    
    // START: IdentityMapBarAggregateDocumentStorage479240932
    public class IdentityMapBarAggregateDocumentStorage479240932 : Marten.Internal.Storage.IdentityMapDocumentStorage<CustomCompiledQueries.BarAggregate, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public IdentityMapBarAggregateDocumentStorage479240932(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(CustomCompiledQueries.BarAggregate document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(CustomCompiledQueries.BarAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteBarAggregateOperation479240932
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateBarAggregateOperation479240932
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(CustomCompiledQueries.BarAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertBarAggregateOperation479240932
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(CustomCompiledQueries.BarAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteBarAggregateOperation479240932
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertBarAggregateOperation479240932
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(CustomCompiledQueries.BarAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteBarAggregateOperation479240932
            (
                document, Identity(document),
                null,
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteBarAggregateOperation479240932
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override System.Guid Identity(CustomCompiledQueries.BarAggregate document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.IdentityMapBarAggregateSelector479240932(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: IdentityMapBarAggregateDocumentStorage479240932
    
    
    // START: DirtyTrackingBarAggregateDocumentStorage479240932
    public class DirtyTrackingBarAggregateDocumentStorage479240932 : Marten.Internal.Storage.DirtyCheckedDocumentStorage<CustomCompiledQueries.BarAggregate, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public DirtyTrackingBarAggregateDocumentStorage479240932(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(CustomCompiledQueries.BarAggregate document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(CustomCompiledQueries.BarAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteBarAggregateOperation479240932
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateBarAggregateOperation479240932
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(CustomCompiledQueries.BarAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertBarAggregateOperation479240932
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(CustomCompiledQueries.BarAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteBarAggregateOperation479240932
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertBarAggregateOperation479240932
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(CustomCompiledQueries.BarAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteBarAggregateOperation479240932
            (
                document, Identity(document),
                null,
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteBarAggregateOperation479240932
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override System.Guid Identity(CustomCompiledQueries.BarAggregate document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.DirtyTrackingBarAggregateSelector479240932(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: DirtyTrackingBarAggregateDocumentStorage479240932
    
    
    // START: BarAggregateBulkLoader479240932
    public class BarAggregateBulkLoader479240932 : Marten.Internal.CodeGeneration.BulkLoader<CustomCompiledQueries.BarAggregate, System.Guid>
    {
        private readonly Marten.Internal.Storage.IDocumentStorage<CustomCompiledQueries.BarAggregate, System.Guid> _storage;

        public BarAggregateBulkLoader479240932(Marten.Internal.Storage.IDocumentStorage<CustomCompiledQueries.BarAggregate, System.Guid> storage) : base(storage)
        {
            _storage = storage;
        }


        public const string MAIN_LOADER_SQL = "COPY public.mt_doc_baraggregate(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string TEMP_LOADER_SQL = "COPY mt_doc_baraggregate_temp(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string COPY_NEW_DOCUMENTS_SQL = "insert into public.mt_doc_baraggregate (\"id\", \"data\", \"mt_dotnet_type\", \"mt_version\", \"mt_deleted\", \"mt_deleted_at\", mt_last_modified) (select mt_doc_baraggregate_temp.\"id\", mt_doc_baraggregate_temp.\"data\", mt_doc_baraggregate_temp.\"mt_dotnet_type\", mt_doc_baraggregate_temp.\"mt_version\", mt_doc_baraggregate_temp.\"mt_deleted\", mt_doc_baraggregate_temp.\"mt_deleted_at\", transaction_timestamp() from mt_doc_baraggregate_temp left join public.mt_doc_baraggregate on mt_doc_baraggregate_temp.id = public.mt_doc_baraggregate.id where public.mt_doc_baraggregate.id is null)";

        public const string OVERWRITE_SQL = "update public.mt_doc_baraggregate target SET data = source.data, mt_dotnet_type = source.mt_dotnet_type, mt_version = source.mt_version, mt_deleted = source.mt_deleted, mt_deleted_at = source.mt_deleted_at, mt_last_modified = transaction_timestamp() FROM mt_doc_baraggregate_temp source WHERE source.id = target.id";

        public const string CREATE_TEMP_TABLE_FOR_COPYING_SQL = "create temporary table mt_doc_baraggregate_temp (like public.mt_doc_baraggregate including defaults)";


        public override string CreateTempTableForCopying()
        {
            return CREATE_TEMP_TABLE_FOR_COPYING_SQL;
        }


        public override string CopyNewDocumentsFromTempTable()
        {
            return COPY_NEW_DOCUMENTS_SQL;
        }


        public override string OverwriteDuplicatesFromTempTable()
        {
            return OVERWRITE_SQL;
        }


        public override void LoadRow(Npgsql.NpgsqlBinaryImporter writer, CustomCompiledQueries.BarAggregate document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer)
        {
            writer.Write(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar);
            writer.Write(document.Id, NpgsqlTypes.NpgsqlDbType.Uuid);
            writer.Write(1, NpgsqlTypes.NpgsqlDbType.Integer);
            writer.Write(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb);
        }


        public override async System.Threading.Tasks.Task LoadRowAsync(Npgsql.NpgsqlBinaryImporter writer, CustomCompiledQueries.BarAggregate document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer, System.Threading.CancellationToken cancellation)
        {
            await writer.WriteAsync(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(document.Id, NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(1, NpgsqlTypes.NpgsqlDbType.Integer, cancellation);
            await writer.WriteAsync(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb, cancellation);
        }


        public override string MainLoaderSql()
        {
            return MAIN_LOADER_SQL;
        }


        public override string TempLoaderSql()
        {
            return TEMP_LOADER_SQL;
        }

    }

    // END: BarAggregateBulkLoader479240932
    
    
    // START: BarAggregateProvider479240932
    public class BarAggregateProvider479240932 : Marten.Internal.Storage.DocumentProvider<CustomCompiledQueries.BarAggregate>
    {
        private readonly Marten.Schema.DocumentMapping _mapping;

        public BarAggregateProvider479240932(Marten.Schema.DocumentMapping mapping) : base(new BarAggregateBulkLoader479240932(new QueryOnlyBarAggregateDocumentStorage479240932(mapping)), new QueryOnlyBarAggregateDocumentStorage479240932(mapping), new LightweightBarAggregateDocumentStorage479240932(mapping), new IdentityMapBarAggregateDocumentStorage479240932(mapping), new DirtyTrackingBarAggregateDocumentStorage479240932(mapping))
        {
            _mapping = mapping;
        }


    }

    // END: BarAggregateProvider479240932
    
    
}

